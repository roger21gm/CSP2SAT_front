{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","input","setInput","model","setModel","result","setResult","error","setError","isLoading","setIsLoading","Container","fluid","style","textAlign","Jumbotron","Row","margin","Col","mode","onChange","value","width","name","editorProps","$blockScrolling","className","color","Button","variant","onClick","axios","post","then","res","a","data","console","log","whiteSpace","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"qWAiGeA,MAnFf,WAAgB,IAAD,EAEYC,mBAAS,iaAFrB,mBAEPC,EAFO,KAEAC,EAFA,OAGYF,mBAAS,4lCAHrB,mBAGPG,EAHO,KAGAC,EAHA,OAKcJ,mBAAS,IALvB,mBAKPK,EALO,KAKCC,EALD,OAMYN,mBAAS,IANrB,mBAMPO,EANO,KAMAC,EANA,OAQoBR,oBAAS,GAR7B,mBAQPS,EARO,KAQIC,EARJ,KA2Bd,OACC,oCACC,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAACC,MAAO,CAACC,UAAU,WACnC,kBAACC,EAAA,EAAD,CAAWH,OAAK,GACf,kBAACD,EAAA,EAAD,KACC,uCACA,iFAKD,kBAACK,EAAA,EAAD,CAAKH,MAAO,CAACI,OAAO,cACnB,kBAACC,EAAA,EAAD,CAAKL,MAAO,CAACC,UAAU,WACtB,qCACA,kBAAC,IAAD,CACCK,KAAK,OAELC,SAAUhB,EACViB,MAAOlB,EACPmB,MAAM,OACNC,KAAK,QACLC,YAAa,CAAEC,iBAAiB,MAGlC,kBAACP,EAAA,EAAD,CAAKL,MAAO,CAACC,UAAU,WACtB,qCACA,kBAAC,IAAD,CACCK,KAAK,OAELC,SAAUlB,EACVmB,MAAOpB,EACPsB,KAAK,QACLD,MAAM,OACNE,YAAa,CAAEC,iBAAiB,OAInC,kBAACT,EAAA,EAAD,CAAKU,UAAU,0BAEbjB,EAEE,kBAAC,IAAD,CAAQkB,MAAM,cADf,kBAACC,EAAA,EAAD,CAAQC,QAAQ,oBAAoBC,QAAS,kBAxDlDpB,GAAa,QACbqB,IAAMC,KAAK,4BAA6B,CACvC/B,QACAE,UAEC8B,MACA,SAAAC,GACC,IAAMC,EAAID,EAAIE,KACdC,QAAQC,IAAIJ,EAAIE,MAChB9B,EAAU6B,EAAE9B,QACZG,EAAS2B,EAAE5B,OACXG,GAAa,QA6CX,WAIH,kBAACM,EAAA,EAAD,KACC,kBAACE,EAAA,EAAD,CAAKL,MAAO,CAACI,OAAO,SACnB,yBAAKJ,MAAO,CAAE0B,WAAY,WAAYzB,UAAW,OAAQa,MAAM,QAASpB,GACxE,6BACA,yBAAKM,MAAO,CAAE0B,WAAY,WAAYzB,UAAW,SAAUT,QC7E7CmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAhD,GACL8B,QAAQ9B,MAAMA,EAAMiD,c","file":"static/js/main.5216abe6.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport AceEditor from \"react-ace\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { Container, Row, Col, Button, Jumbotron} from 'react-bootstrap';\nimport { Ripple } from 'react-spinners-css';\n\n\nimport \"ace-builds/src-noconflict/mode-java\";\nimport \"ace-builds/src-noconflict/theme-github\";\n\n\nfunction App() {\n\n\tconst [input, setInput] = useState(\"{\\r\\n    \\\"n\\\" : 9,\\r\\n    \\\"iniSudoku\\\" : [\\r\\n        [8, 0, 0, 0, 0, 0, 0, 0, 0],\\r\\n        [0, 0, 3, 6, 0, 0, 0, 0, 0],\\r\\n        [0, 7, 0, 0, 9, 0, 2, 0, 0],\\r\\n        [0, 5, 0, 0, 0, 7, 0, 0, 0],\\r\\n        [0, 0, 0, 0, 4, 5, 7, 0, 0],\\r\\n        [0, 0, 0, 1, 0, 0, 0, 3, 0],\\r\\n        [0, 0, 1, 0, 0, 0, 0, 6, 8],\\r\\n        [0, 0, 8, 5, 0, 0, 0, 1, 0],\\r\\n        [0, 9, 0, 0, 0, 0, 4, 0, 0]\\r\\n    ]\\r\\n}\");\n\tconst [model, setModel] = useState(\"entities:\\r\\n    B {\\r\\n        param int c1;\\r\\n    };\\r\\n    A {\\r\\n        param int b1[5];\\r\\n        var x;\\r\\n        B a;\\r\\n    };\\r\\n\\r\\nviewpoint:\\r\\n    param int n;\\r\\n    var p[n][n][n];\\r\\n    param int iniSudoku[9][9];\\r\\n\\r\\nconstraints:\\r\\n    forall(i in 0..8, j in 0..8){\\r\\n        EK(p[i][j][_], 1); // Un \\u00FAnic valor per cel\\u00B7la\\r\\n        AMK(p[i][_][j], 1); // Cada valor apareix una vegada per fila\\r\\n        AMK(p[_][i][j], 1); // Cada valor apareix una vegada per columna.\\r\\n    };\\r\\n\\r\\n\\r\\n    //Cada valor apareix una vagada als subquadrats de 3x3.\\r\\n    forall(i in [0,3,6], j in [0,3,6], k in 0..8){\\r\\n        AMK([p[i+l][j+g][k] | l in 0..2, g in 0..2], 1);\\r\\n    };\\r\\n\\r\\n\\r\\n    //Inicialitzem els valors fixats del sudoku.\\r\\n    forall(i in 0..8, j in 0..8){\\r\\n        if(iniSudoku[i][j] != 0){\\r\\n            p[i][j][iniSudoku[i][j]-1];\\r\\n        };\\r\\n    };\\r\\n\\r\\noutput:\\r\\n    \\\"Soluci\\u00F3 sudoku: \\\\n\\\";\\r\\n    [ k+1 ++ \\\" \\\" ++ ((j+1) % 3 == 0 ? \\\" \\\" : \\\"\\\") ++ (j==8 ? (i+1) % 3 == 0 ? \\\"\\\\n\\\\n\\\": \\\"\\\\n\\\" : \\\"\\\") | i in 0..8, j in 0..8, k in 0..8 where p[i][j][k]];\");\n\n\tconst [result, setResult] = useState(\"\");\n\tconst [error, setError] = useState(\"\");\n\n\tconst [isLoading, setIsLoading] = useState(false);\n\n\tconst handleClick = () => {\n\t\tsetIsLoading(true);\n\t\taxios.post('http://34.83.174.109:9090', {\n\t\t\tinput,\n\t\t\tmodel\n\t\t})\n\t\t\t.then(\n\t\t\t\tres => {\n\t\t\t\t\tconst a = res.data;\n\t\t\t\t\tconsole.log(res.data);\n\t\t\t\t\tsetResult(a.result);\n\t\t\t\t\tsetError(a.error);\n\t\t\t\t\tsetIsLoading(false);\n\t\t\t\t}\n\t\t\t)\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Container fluid style={{textAlign:'center'}}>\n\t\t\t<Jumbotron fluid>\n\t\t\t\t<Container>\n\t\t\t\t\t<h1>CSP2SAT</h1>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tDeclarative language for modelling CSPs into SAT\n\t\t\t\t\t</p>\n\t\t\t\t</Container>\n\t\t\t</Jumbotron>\n\t\t\t\t<Row style={{margin:\"50px 10px\"}}>\n\t\t\t\t\t<Col style={{textAlign:'center'}}>\n\t\t\t\t\t\t<h3>MODEL</h3>\n\t\t\t\t\t\t<AceEditor\n\t\t\t\t\t\t\tmode=\"java\"\n\t\t\t\t\t\t\t//theme=\"tomorrow\"\n\t\t\t\t\t\t\tonChange={setModel}\n\t\t\t\t\t\t\tvalue={model}\n\t\t\t\t\t\t\twidth=\"100%\"\n\t\t\t\t\t\t\tname=\"model\"\n\t\t\t\t\t\t\teditorProps={{ $blockScrolling: true }}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col style={{textAlign:'center'}}>\n\t\t\t\t\t\t<h3>INPUT</h3>\n\t\t\t\t\t\t<AceEditor\n\t\t\t\t\t\t\tmode=\"java\"\n\t\t\t\t\t\t\t//theme=\"tomorrow\"\n\t\t\t\t\t\t\tonChange={setInput}\n\t\t\t\t\t\t\tvalue={input}\n\t\t\t\t\t\t\tname=\"input\"\n\t\t\t\t\t\t\twidth=\"100%\"\n\t\t\t\t\t\t\teditorProps={{ $blockScrolling: true }}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row className=\"justify-content-center\">\n\t\t\t\t{\n\t\t\t\t\t!isLoading ? \n\t\t\t\t\t\t(<Button variant=\"outline-secondary\" onClick={() => handleClick()}>Submit</Button>)\n\t\t\t\t\t\t: <Ripple color=\"lightgray\" />\n\t\t\t\t}\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col style={{margin:\"0 5%\"}}>\n\t\t\t\t\t\t<div style={{ whiteSpace: 'pre-wrap', textAlign: 'left', color:\"red\"}}>{error}</div>\n\t\t\t\t\t\t<br/>\n\t\t\t\t\t\t<div style={{ whiteSpace: 'pre-wrap', textAlign: 'left'}}>{result}</div>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\t\t</>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}